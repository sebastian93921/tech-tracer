name: Build TechTracer

on:
  push:
    tags: [ 'v*.*.*' ]

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        node-version: [22.x]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        
    # Extract version from tag and update package.json
    - name: Update version in package.json (Linux/macOS)
      if: startsWith(github.ref, 'refs/tags/v') && (matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest')
      shell: bash
      run: |
        # Extract version number from tag (remove 'v' prefix)
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "Extracted version: $VERSION"
        
        # Update package.json with the extracted version
        npm version $VERSION --no-git-tag-version
        
        # Show the updated version
        echo "Updated package.json version to $VERSION"
    
    # Windows version using PowerShell
    - name: Update version in package.json (Windows)
      if: startsWith(github.ref, 'refs/tags/v') && matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        # Extract version number from tag (remove 'v' prefix)
        $VERSION = $env:GITHUB_REF -replace 'refs/tags/v', ''
        Write-Host "Extracted version: $VERSION"
        
        # Update package.json with the extracted version
        npm version $VERSION --no-git-tag-version
        
        # Show the updated version
        Write-Host "Updated package.json version to $VERSION"
        
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        # Try using npm ci first (faster & more reliable for CI)
        npm ci || (echo "npm ci failed, falling back to npm install" && npm install)
      
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libx11-dev libxkbfile-dev libsecret-1-dev libxss-dev

    - name: Build macOS
      if: matrix.os == 'macos-latest'
      run: |
        npm run build:mac
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build Windows
      if: matrix.os == 'windows-latest'
      run: |
        npm run build:win
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        npm run build:linux
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    # Upload artifacts to the same release
    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      if: github.event_name == 'release'
      with:
        files: |
          dist/*.dmg
          dist/*.zip
          dist/*.exe
          dist/*.msi
          dist/*.AppImage
          dist/*.deb
          dist/*.rpm
        tag_name: ${{ github.event.release.tag_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 